--[[ 
    ⚠️ WARNING:
    Do NOT select multiple mini games at once.
    Let one finish before starting another to avoid glitches.
--]]

-- Load Orion Library
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)"))()

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")
local HttpService = game:GetService("HttpService")

-- GUI Window
local Window = OrionLib:MakeWindow({
    Name = LocalPlayer.DisplayName .. "'s Chillem GUI ⚡️",
    HidePremium = false,
    SaveConfig = false,
    ConfigFolder = "JackDarkGUI",
    IntroText = "Welcome " .. LocalPlayer.DisplayName .. "!",
    Theme = "Dark"
})

-- Load Infinite Yield
loadstring(game:HttpGet("https://rawscripts.net/raw/Infinite-Yield_500"))()

-- ESP
local espEnabled = false
local espTags = {}

local function addESP(player)
    if player == LocalPlayer then return end
    local char = player.Character or player.CharacterAdded:Wait()
    local torso = char:WaitForChild("LowerTorso", 5) or char:FindFirstChild("HumanoidRootPart")
    if torso and not torso:FindFirstChild("ESP_Tag") then
        local billboard = Instance.new("BillboardGui", torso)
        billboard.Name = "ESP_Tag"
        billboard.Size = UDim2.new(0, 100, 0, 25)
        billboard.StudsOffset = Vector3.new(0, 2, 0)
        billboard.AlwaysOnTop = true

        local label = Instance.new("TextLabel", billboard)
        label.Size = UDim2.new(1, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = player.DisplayName
        label.TextColor3 = Color3.fromRGB(255, 0, 0)
        label.Font = Enum.Font.SourceSansBold
        label.TextSize = 20
        label.TextStrokeTransparency = 0.2
        label.TextStrokeColor3 = Color3.new(0, 0, 0)

        espTags[player] = billboard
    end
end

local function updateESP()
    for _, v in pairs(espTags) do if v and v.Parent then v:Destroy() end end
    espTags = {}
    for _, p in ipairs(Players:GetPlayers()) do addESP(p) end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espEnabled then task.wait(1) addESP(player) end
    end)
end)

--music
local musicLibrary = {
    ["🌮 It's Raining Tacos"] = "rbxassetid://142376088",
    ["🎧 Chill Lofi"] = "rbxassetid://1846458016",
    ["🎤 Rap Beat"] = "rbxassetid://133988484250262",
    ["🎮 Phonk"] = "rbxassetid://132024343"
}  

local musicSound = nil
local musicEnabled = false
local selectedTrack = "🌮 It's Raining Tacos"
local musicVolume = 1

local function playMusic()
    if not musicSound then
        musicSound = Instance.new("Sound", SoundService)
        musicSound.Name = "JackMusic"
        musicSound.Looped = true
    end
    musicSound.SoundId = musicLibrary[selectedTrack]
    musicSound.Volume = musicVolume
    musicSound:Play()
end

local function stopMusic()
    if musicSound then musicSound:Stop() end
end

-- 🌀 Commands Tab
local CommandsTab = Window:MakeTab({ Name = "🌀 Commands", Icon = "rbxassetid://7734053499", PremiumOnly = false })

CommandsTab:AddToggle({
    Name = "🧠 Player ESP",
    Default = false,
    Callback = function(val)
        espEnabled = val
        if val then updateESP() else
            for _, v in pairs(espTags) do if v and v.Parent then v:Destroy() end end
        end
    end
})

CommandsTab:AddToggle({
    Name = "🎵 Toggle Music",
    Default = false,
    Callback = function(val)
        musicEnabled = val
        if val then playMusic() else stopMusic() end
    end
})

CommandsTab:AddDropdown({
    Name = "🎶 Select Music",
    Default = selectedTrack,
    Options = { "🌮 It's Raining Tacos", "🎧 Chill Lofi", "🎤 Rap Beat", "🎮 Pixel Beats" },
    Callback = function(val)
        selectedTrack = val
        if musicEnabled then playMusic() end
    end
})

CommandsTab:AddSlider({
    Name = "🎚 Volume",
    Min = 0, Max = 100, Default = 100,
    Callback = function(v)
        musicVolume = v / 100
        if musicSound then musicSound.Volume = musicVolume end
    end
})

-- ⚡ Hacks Tab
local HacksTab = Window:MakeTab({ Name = "⚡ Regular Hacks", Icon = "rbxassetid://4483345998", PremiumOnly = false })

HacksTab:AddSlider({
    Name = "🏃 Walk Speed",
    Min = 1, Max = 500, Default = 16,
    Callback = function(val)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = val
        end
    end
})

LocalPlayer.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid").WalkSpeed = 16
end)

-- 🎮 Mini Games Tab
local GamesTab = Window:MakeTab({ Name = "🎮 Mini Games", Icon = "rbxassetid://7743878856", PremiumOnly = false })
GamesTab:AddParagraph("📘 Tutorial", "To start, select a mini game from the dropdown below (Make sure to SAVE your SCORE).")
GamesTab:AddParagraph("📌 Rules", "• Do NOT run multiple mini-games at once.\n• Finish the current game before starting another.\n• Scores will track your best attempts.")

-- Score Tracking
local scoreData = {
    Clicks = 0,
    FastestReaction = math.huge,
    GuessTries = math.huge,
    MathCorrect = 0
}

local display = GamesTab:AddParagraph("📋 Your Scores", "")
local function updateDisplay()
    display:Set(string.format("• Clicks: %d\n• Reaction Time: %s\n• Guess Tries: %s\n• Math Correct: %d",
        scoreData.Clicks,
        scoreData.FastestReaction ~= math.huge and scoreData.FastestReaction .. "ms" or "--",
        scoreData.GuessTries ~= math.huge and scoreData.GuessTries or "--",
        scoreData.MathCorrect))
end
updateDisplay()

local miniGameRunning = false
local function endGame() miniGameRunning = false end

GamesTab:AddDropdown({
    Name = "🎮 Select Mini Game",
    Default = "None",
    Options = { "None", "🖱 Click Speed Test", "🔢 Guess the Number", "⚡ Reaction Time", "🧮 Math Quiz" },
    Callback = function(gameChoice)
        if miniGameRunning then
            OrionLib:MakeNotification({ Name = "Already Running", Content = "Wait for the current mini-game to finish.", Time = 4 })
            return
        end
        miniGameRunning = true

        if gameChoice == "🖱 Click Speed Test" then
            local gui = Instance.new("ScreenGui", game.CoreGui)
            gui.Name = "ClickSpeedTest"
            local frame = Instance.new("Frame", gui)
            frame.Size = UDim2.new(0, 250, 0, 150)
            frame.Position = UDim2.new(0.5, -125, 0.5, -75)
            frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

            local button = Instance.new("TextButton", frame)
            button.Size = UDim2.new(1, 0, 0.6, 0)
            button.Text = "Click Me!"
            button.Font = Enum.Font.GothamBold
            button.TextSize = 22
            button.TextColor3 = Color3.new(1,1,1)
            button.BackgroundColor3 = Color3.fromRGB(100,100,100)

            local label = Instance.new("TextLabel", frame)
            label.Size = UDim2.new(1, 0, 0.4, 0)
            label.Position = UDim2.new(0, 0, 0.6, 0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextColor3 = Color3.new(1,1,1)
            label.TextSize = 18
            label.Text = "Click for 10 seconds!"

            local clicks, running = 0, true
            button.MouseButton1Click:Connect(function() if running then clicks += 1 end end)
            task.delay(10, function()
                running = false
                label.Text = "You clicked " .. clicks .. " times!"
                if clicks > scoreData.Clicks then scoreData.Clicks = clicks updateDisplay() end
                task.wait(3)
                gui:Destroy()
                endGame()
            end)

        elseif gameChoice == "🔢 Guess the Number" then
            local number = math.random(1, 10)
            local attempts = 3
            OrionLib:MakeNotification({Name = "Guess", Content = "Guess a number (1–10) in chat.", Time = 5})
            local conn
            conn = LocalPlayer.Chatted:Connect(function(msg)
                local guess = tonumber(msg)
                if not guess then return end
                if guess == number then
                    OrionLib:MakeNotification({Name = "✅ Correct!", Content = "You guessed it!", Time = 3})
                    if 4 - attempts < scoreData.GuessTries then scoreData.GuessTries = 4 - attempts updateDisplay() end
                    conn:Disconnect() endGame()
                else
                    attempts -= 1
                    if attempts == 0 then
                        OrionLib:MakeNotification({Name = "❌ Out of Tries", Content = "It was " .. number, Time = 3})
                        conn:Disconnect() endGame()
                    else
                        OrionLib:MakeNotification({Name = "❗ Try Again", Content = "Tries left: " .. attempts, Time = 2})
                    end
                end
            end)

        elseif gameChoice == "⚡ Reaction Time" then
            local gui = Instance.new("ScreenGui", game.CoreGui)
            gui.Name = "ReactionTime"
            local frame = Instance.new("Frame", gui)
            frame.Size = UDim2.new(0, 300, 0, 200)
            frame.Position = UDim2.new(0.5, -150, 0.5, -100)
            frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

            local button = Instance.new("TextButton", frame)
            button.Size = UDim2.new(1, 0, 1, 0)
            button.Text = "Wait for Green..."
            button.Font = Enum.Font.GothamBold
            button.TextSize = 24
            button.TextColor3 = Color3.new(1,1,1)
            button.BackgroundColor3 = Color3.fromRGB(150, 0, 0)

            task.delay(math.random(2, 5), function()
                local start = tick()
                button.Text = "CLICK!"
                button.BackgroundColor3 = Color3.fromRGB(0, 180, 0)
                button.MouseButton1Click:Connect(function()
                    local reaction = math.floor((tick() - start) * 1000)
                    button.Text = "Time: " .. reaction .. "ms"
                    if reaction < scoreData.FastestReaction then
                        scoreData.FastestReaction = reaction
                        updateDisplay()
                    end
                    task.wait(3)
                    gui:Destroy()
                    endGame()
                end)
            end)
-- Math Quiz GUI + Logic
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Global game state
_G.ActiveGame = nil

-- Create GUI
local mathQuizGui = Instance.new("ScreenGui")
mathQuizGui.Name = "MathQuizGUI"
mathQuizGui.ResetOnSpawn = false
mathQuizGui.Enabled = false
mathQuizGui.Parent = PlayerGui

-- Main Frame
local mainFrame = Instance.new("Frame", mathQuizGui)
mainFrame.Size = UDim2.new(0, 300, 0, 200)
mainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 12)

-- Question Label
local questionLabel = Instance.new("TextLabel", mainFrame)
questionLabel.Size = UDim2.new(1, -20, 0, 50)
questionLabel.Position = UDim2.new(0, 10, 0, 10)
questionLabel.BackgroundTransparency = 1
questionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
questionLabel.TextScaled = true
questionLabel.Text = "Loading question..."

-- Input Box
local inputBox = Instance.new("TextBox", mainFrame)
inputBox.Size = UDim2.new(1, -20, 0, 40)
inputBox.Position = UDim2.new(0, 10, 0, 70)
inputBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
inputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
inputBox.Text = ""
inputBox.PlaceholderText = "Enter your answer"
inputBox.TextScaled = true
Instance.new("UICorner", inputBox).CornerRadius = UDim.new(0, 8)

-- Submit Button
local submitBtn = Instance.new("TextButton", mainFrame)
submitBtn.Size = UDim2.new(1, -20, 0, 40)
submitBtn.Position = UDim2.new(0, 10, 0, 120)
submitBtn.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
submitBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
submitBtn.TextScaled = true
submitBtn.Text = "Submit"
Instance.new("UICorner", submitBtn).CornerRadius = UDim.new(0, 8)

-- Retry GUI
local retryGui = Instance.new("Frame", mathQuizGui)
retryGui.Size = UDim2.new(0, 250, 0, 150)
retryGui.Position = UDim2.new(0.5, -125, 0.5, -75)
retryGui.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
retryGui.Visible = false
Instance.new("UICorner", retryGui)

local retryText = Instance.new("TextLabel", retryGui)
retryText.Size = UDim2.new(1, 0, 0, 50)
retryText.Position = UDim2.new(0, 0, 0, 10)
retryText.BackgroundTransparency = 1
retryText.TextColor3 = Color3.fromRGB(255, 255, 255)
retryText.TextScaled = true
retryText.Text = "You ran out of tries!\nPlay again?"

local playAgainBtn = Instance.new("TextButton", retryGui)
playAgainBtn.Size = UDim2.new(0.4, 0, 0, 40)
playAgainBtn.Position = UDim2.new(0.05, 0, 0.65, 0)
playAgainBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
playAgainBtn.Text = "Play Again"
playAgainBtn.TextScaled = true
playAgainBtn.TextColor3 = Color3.new(1,1,1)
Instance.new("UICorner", playAgainBtn)

local quitBtn = Instance.new("TextButton", retryGui)
quitBtn.Size = UDim2.new(0.4, 0, 0, 40)
quitBtn.Position = UDim2.new(0.55, 0, 0.65, 0)
quitBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
quitBtn.Text = "Quit"
quitBtn.TextScaled = true
quitBtn.TextColor3 = Color3.new(1,1,1)
Instance.new("UICorner", quitBtn)

-- Logic
local triesLeft = 5
local correctAnswer = 0

local function newQuestion()
	local a = math.random(1, 10)
	local b = math.random(1, 10)
	local op = math.random(1, 2)
	if op == 1 then
		questionLabel.Text = a .. " + " .. b
		correctAnswer = a + b
	else
		questionLabel.Text = a .. " * " .. b
		correctAnswer = a * b
	end
end

local function startQuiz()
	_G.ActiveGame = "MathQuiz"
	triesLeft = 5
	inputBox.Text = ""
	mathQuizGui.Enabled = true
	mainFrame.Visible = true
	retryGui.Visible = false
	newQuestion()
end

local function endQuiz()
	_G.ActiveGame = nil
	mathQuizGui.Enabled = false
end

submitBtn.MouseButton1Click:Connect(function()
	local userAnswer = tonumber(inputBox.Text)
	if userAnswer == correctAnswer then
		OrionLib:MakeNotification({Name="Correct!", Content="You got it right!", Time=2})
		newQuestion()
	else
		triesLeft -= 1
		OrionLib:MakeNotification({Name="Wrong!", Content="Tries left: "..triesLeft, Time=2})
		if triesLeft <= 0 then
			mainFrame.Visible = false
			retryGui.Visible = true
		end
	end
	inputBox.Text = ""
end)

playAgainBtn.MouseButton1Click:Connect(function()
	retryGui.Visible = false
	mainFrame.Visible = true
	triesLeft = 5
	newQuestion()
end)

quitBtn.MouseButton1Click:Connect(function()
	endQuiz()
end)

-- Chat quit support
LocalPlayer.Chatted:Connect(function(msg)
	if string.lower(msg) == "quit" and _G.ActiveGame == "MathQuiz" then
		endQuiz()
		OrionLib:MakeNotification({Name="Exited", Content="You exited Math Quiz.", Time=3})
	end
end)

-- Mini Game Tab Registration
MiniGamesDropdown:Add("Math Quiz", function()
	if _G.ActiveGame then
		OrionLib:MakeNotification({Name="Wait", Content="Finish the current game first!", Time=3})
		return
	end
	startQuiz()
end)

    
})GamesTab:AddButton({
    Name = "💾 Save Scores",
    Callback = function()
        local data = HttpService:JSONEncode(scoreData)
        writefile("ChillemScores.json", data)
        OrionLib:MakeNotification({
            Name = "Saved!",
            Content = "Your scores have been saved successfully.",
            Time = 3
        })
    end
})if isfile("ChillemScores.json") then
    local success, saved = pcall(function()
        return HttpService:JSONDecode(readfile("ChillemScores.json"))
    end)
    if success and typeof(saved) == "table" then
        scoreData = saved
    end
end
updateDisplay()

